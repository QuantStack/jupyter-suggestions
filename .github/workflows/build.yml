name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        run: python -m pip install -U "jupyterlab>=4.0.0,<5"

      - name: Lint the extension
        run: |
          set -eux
          jlpm
          jlpm run lint:check

      - name: Build the extension
        run: |
          set -eux
          jlpm dev

          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "suggestions.*OK"
          python -m jupyterlab.browser_check

      - name: Package the extension
        run: |
          set -eux

          pip install hatch
          jlpm build:packages

      - name: Upload extension packages
        uses: actions/upload-artifact@v4
        with:
          name: extension-artifacts
          path: |
            python/*/dist/jupyter_suggestions*
          if-no-files-found: error

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'
      - uses: actions/download-artifact@v4
        with:
          name: extension-artifacts
      - name: Install and Test
        run: |
          set -eux
          # Remove NodeJS, twice to take care of system and locally installed node versions.
          sudo rm -rf $(which node)
          sudo rm -rf $(which node)

          cp ./jupyter_suggestions_core/dist/jupyter_suggestions*.whl .
          cp ./jupyter_suggestions_rtc/dist/jupyter_suggestions*.whl .
          pip install "jupyterlab>=4.0.0,<5" jupyter_suggestions*.whl


          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "suggestions.*OK"
          python -m jupyterlab.browser_check --no-browser-test

  check_links:
    name: Check Links
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1

  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        backend: ['local', 'rtc']

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'

      - uses: actions/download-artifact@v4
        with:
          name: extension-artifacts

      - name: Install base package
        run: |
          set -eux
          cp ./jupyter_suggestions_core/dist/jupyter_suggestions_core*.whl .
          pip install "jupyterlab>=4.0.0,<5" jupyter_suggestions_core*.whl

      - name: Install rtc package
        if: matrix.backend == 'rtc'
        run: |
          set -eux
          cp ./jupyter_suggestions_rtc/dist/jupyter_suggestions_rtc*.whl .
          pip install jupyter_suggestions_rtc*.whl

      - name: Install dependencies
        shell: bash -l {0}
        working-directory: ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install

      - name: Set up browser cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

      - name: Install browser
        shell: bash -l {0}
        run: npx playwright install chromium
        working-directory: ui-tests

      - name: Execute integration tests
        shell: bash -l {0}
        working-directory: ui-tests
        run: |
          npx playwright test
        env:
          BACKEND: ${{ matrix.backend }}

      - name: Upload Playwright Test report
        id: upload-galata-artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jupyter-suggestions-playwright-${{ matrix.backend }}-tests
          path: |
            ui-tests/test-results
            ui-tests/playwright-report
  build-lite:
    name: Build JupyterLite
    needs: [test_isolated, integration-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install the dependencies
        run: |
          python -m pip install "jupyterlite-core>=0.5.0a0,<0.6" "jupyterlite-pyodide-kernel>=0.5.0a1,<0.6"

      - name: Download extension package
        uses: actions/download-artifact@v4
        with:
          name: extension-artifacts

      - name: Install the extension
        run: |
          set -eux
          cp ./jupyter_suggestions_core/dist/jupyter_suggestions*.whl .
          python -m pip install jupyter_suggestions*.whl

      - name: Build the lite site
        run: |
          set -eux
          jupyter lite build --output-dir dist

      - name: Upload github-pages artifact
        id: upload-jupyterlite-artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          retention-days: 30

  deploy:
    needs: [build-lite]
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
